#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define ______ &trans
#define HYPER(key) LS(LC(LA(LG(key))))

&sensors {
	status = "okay";
	sensors = <&left_encoder &mid_encoder &right_encoder>;
};

&left_encoder { status = "okay"; };
&right_encoder { status = "okay"; };


#define BASE    0
#define SPOTIFY 1
#define SYSCTL  2


#define PV_SP_PLAYPAUSE HYPER(N1)
#define PV_SP_NEXT HYPER(N2)
#define PV_SP_PREV HYPER(N3)
#define PV_SP_MUTE HYPER(N4)
#define PV_SP_VOLD HYPER(N5)
#define PV_SP_VOLU HYPER(N6)
#define PV_NT_TOD  HYPER(N7)
#define PV_RORO    HYPER(N8)
#define PV_SCRSVR  HYPER(N9)
#define PV_SLEEP   LA(LG(C_POWER))


/ {
	macros {
		// TODO: at some point, make this into a macro with something like SEND_STRING from qmk. apparently this doesnt exist yet in zmk.
		ZMK_MACRO(
			pv_name,
			bindings = <&kp B &kp D &kp N &kp N9 &kp UNDERSCORE &kp R &kp E &kp V &kp N2>;
			wait-ms = <30>;
			tap-ms = <30>;
		)
	};

	keymap {
		compatible = "zmk,keymap";

		BASE_layer {
			bindings = <
				&kp C_MUTE   &none             &kp PV_SP_MUTE
				&mo SPOTIFY  &kp PV_NT_TOD     &mo SYSCTL
				&kp C_PREV   &kp C_PLAY_PAUSE  &kp C_NEXT
			>;
			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp X X &inc_dec_kp PV_SP_VOLU PV_SP_VOLD>;
		};

		SPOTIFY_layer {
			bindings = <
				______          &kp PV_SP_MUTE       ______
				______          ______               ______
				&kp PV_SP_PREV  &kp PV_SP_PLAYPAUSE  &kp PV_SP_NEXT
			>;
			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp X X &inc_dec_kp PV_SP_VOLU PV_SP_VOLD>;
		};

		// TODO: add a flash button
		// seems like reset doesnt work. tried &bootloader and &reset. according to discord, https://ptb.discord.com/channels/719497620560543766/719909884769992755/1051289399373082745, its not implemented yet for stm32.
		SYSCTL_layer {
			bindings = <
				______    &kp PV_SLEEP   ______
				&pv_name  &reset         ______
				______    &kp PV_SCRSVR  &kp PV_RORO
			>;
			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp X X &inc_dec_kp PV_SP_VOLU PV_SP_VOLD>;
		};
	};
};
